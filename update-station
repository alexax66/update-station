#!/usr/local/bin/python

import bectl
import datetime
import getpass
import gi
import json
import os
import gettext
import re
import socket
import sys
import threading
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib
from subprocess import Popen, PIPE, run
from time import sleep

gettext.bindtextdomain('update-station', '/usr/local/share/locale')
gettext.textdomain('update-station')
_ = gettext.gettext

lib_path = f'{sys.prefix}/lib/update-station'
sys.path.append(lib_path)
from updateHandler import (
    get_pkg_upgrade_data,
    check_for_update,
    network_stat,
    repo_online,
    look_update_station,
    unlook_update_station,
    updating,
    repository_is_syncing
)

__VERSION__ = '4.7'

username = os.environ.get('SUDO_USER') if 'SUDO_USER' in os.environ else getpass.getuser()
home = os.path.expanduser('~')
global backup, second, insingal, threadBreak, uwinstatue, stop_pkg_refreshing
global update_started
backup = False
second = False
insingal = True
threadBreak = False
uwinstatue = True
stop_pkg_refreshing = False
update_started = False


class UpdateWindow:

    def delete_event(self, widget):
        if close_session is True:
            if updating():
                unlook_update_station()
            Gtk.main_quit()
        else:
            self.window.destroy()
            global stop_pkg_refreshing, update_started
            if update_started is False:
                stop_pkg_refreshing = False
                if updating():
                    unlook_update_station()
                print('True')
                statusIcon.set_visible(True)

    def startupdate(self, widget):
        if self.insingal is True:
            global update_started
            update_started = True
            InstallUpdate()
            self.insingal = False
            self.window.hide()

    def if_backup(self, widget):
        global backup
        backup = widget.get_active()

    def create_bbox(self):
        table = Gtk.Table(n_rows=1, n_columns=5, homogeneous=False, column_spacing=5)
        backup_checkbox = Gtk.CheckButton(label=_("Create boot environment backup"))
        table.attach(backup_checkbox, 0, 1, 0, 1)
        backup_checkbox.connect("toggled", self.if_backup)
        if len(bectl.get_be_list()) >= 2 and second is False:
            backup_checkbox.set_active(True)
            backup_checkbox.set_sensitive(True)
        else:
            backup_checkbox.set_active(False)
            backup_checkbox.set_sensitive(False)
        global backup
        backup = backup_checkbox.get_active()
        img = Gtk.Image(icon_name='window-close')
        Close_button = Gtk.Button(label=_("Close"))
        Close_button.set_image(img)
        table.attach(Close_button, 3, 4, 0, 1)
        Close_button.connect("clicked", self.delete_event)
        install_button = Gtk.Button(label=_("Install update"))
        table.attach(install_button, 4, 5, 0, 1)
        install_button.connect("clicked", self.startupdate)
        return table

    def __init__(self):
        self.insingal = True
        # window
        self.window = Gtk.Window()
        self.window.connect("destroy", self.delete_event)
        self.window.set_size_request(700, 400)
        self.window.set_resizable(False)
        self.window.set_title(_("Update Manager"))
        self.window.set_border_width(0)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.set_default_icon_name('system-software-update')
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=0)
        box2.set_border_width(20)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        # Title
        titletext = _("Updates available!")
        titlelabel = Gtk.Label(label=f"<b><span size='large'>{titletext}</span></b>")
        titlelabel.set_use_markup(True)
        box2.pack_start(titlelabel, False, False, 0)
        self.tree_store = Gtk.TreeStore(str, bool)
        sw = Gtk.ScrolledWindow()
        sw.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
        sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        sw.add(self.display(self.store()))
        sw.show()
        box2.pack_start(sw, True, True, 10)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, False, 5)
        box2.show()
        # Add button
        box2.pack_start(self.create_bbox(), True, True, 10)
        self.window.show_all()

    def store(self):
        self.tree_store.clear()
        global total_num
        r_num = 0
        u_num = 0
        i_num = 0
        ri_num = 0
        if bool(packages_dictionary['remove']):
            r_num = len(packages_dictionary['remove'])
            message = _('Installed packages to be REMOVED:')
            message += f' {r_num}'
            r_pinter = self.tree_store.append(None, (message, True))
            for line in packages_dictionary['remove']:
                self.tree_store.append(r_pinter, (line, True))
        if bool(packages_dictionary['upgrade']):
            u_num = len(packages_dictionary['upgrade'])
            message = _('Installed packages to be UPGRADED')
            message += f' {u_num}'
            u_pinter = self.tree_store.append(None, (message, True))
            for line in packages_dictionary['upgrade']:
                self.tree_store.append(u_pinter, (line, True))
        if bool(packages_dictionary['install']):
            i_num = len(packages_dictionary['install'])
            message = _('New packages to be INSTALLED:')
            message += f' {i_num}'
            i_pinter = self.tree_store.append(None, (message, True))
            for line in packages_dictionary['install']:
                self.tree_store.append(i_pinter, (line, True))
        if bool(packages_dictionary['reinstall']):
            ri_num = len(packages_dictionary['reinstall'])
            message = _('Installed packages to be REINSTALLED:')
            message += f' {ri_num}'
            ri_pinter = self.tree_store.append(None, (message, True))
            for line in packages_dictionary['reinstall']:
                self.tree_store.append(ri_pinter, (line, True))
        total_num = r_num + u_num + i_num + ri_num
        return self.tree_store

    def display(self, model):
        self.view = Gtk.TreeView(model=model)
        self.renderer = Gtk.CellRendererText()
        self.column0 = Gtk.TreeViewColumn("Name", self.renderer, text=0)
        self.view.append_column(self.column0)
        self.view.set_headers_visible(False)
        return self.view


class TrayIcon:
    def close_application(self, widget):
        quit()

    def __init__(self):
        # Statue Tray Code
        global statusIcon
        statusIcon = Gtk.StatusIcon()
        statusIcon.set_tooltip_text('Update Available')
        self.menu = Gtk.Menu()
        self.menu.show_all()
        statusIcon.connect("activate", self.leftclick)
        statusIcon.connect('popup-menu', self.icon_clicked)
        statusIcon.set_visible(False)
        statusIcon.set_from_icon_name('system-software-update')

    def nm_menu(self):
        # right click menue
        self.menu = Gtk.Menu()
        open_update = Gtk.MenuItem(_("Open Update"))
        open_update.connect("activate", self.leftclick)
        close_item = Gtk.MenuItem(_("Close"))
        close_item.connect("activate", self.close_application)
        self.menu.append(open_update)
        self.menu.append(close_item)
        self.menu.show_all()
        return self.menu

    def leftclick(self, status_icon):
        global stop_pkg_refreshing, statusIcon
        if updating():
            update_station_open()
        else:
            stop_pkg_refreshing = True
            look_update_station()
            UpdateWindow()
        statusIcon.set_visible(False)

    def icon_clicked(self, status_icon, button, time):
        position = Gtk.StatusIcon.position_menu
        self.nm_menu().popup(None, None, position, status_icon, button, time)

    def updatetray(self):
        if check_for_update() is True:
            global stop_icon_refreshing
            GLib.idle_add(statusIcon.set_visible, True)
            msg = _("System and software upgrades are now available")
            notify = 'notify-send _("Update available") '
            notify += f'"{msg}" -i stock_view-details -t 10000'
            Popen(notify, shell=True, close_fds=True)
        else:
            GLib.idle_add(statusIcon.set_visible, False)

        return

    def treadingupdate(self):
        # make sure that the look is clear on start up.
        if updating():
            unlook_update_station()
        thr = threading.Thread(target=self.check)
        thr.setDaemon(True)
        thr.start()

    def check(self):
        while True:
            sleep(120)
            global packages_dictionary
            if repository_is_syncing() is False:
                if stop_pkg_refreshing is False:
                    if not updating():
                        packages_dictionary = get_pkg_upgrade_data()
                        GLib.idle_add(self.updatetray)
                    else:
                        GLib.idle_add(statusIcon.set_visible, False)
            # Wait for an hour to look for update
            sleep(3480)
        return True


class InstallUpdate:

    def close_application(self, widget, data):
        if updating():
            unlook_update_station()
        Gtk.main_quit()

    def __init__(self):
        self.win = Gtk.Window()
        self.win.connect("delete-event", self.close_application)
        self.win.set_size_request(500, 75)
        self.win.set_resizable(False)
        self.win.set_title(_("Installing Update"))
        self.win.set_border_width(0)
        self.win.set_position(Gtk.WindowPosition.CENTER)
        self.win.set_default_icon_name('system-software-update')
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.win.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        self.pbar = Gtk.ProgressBar()
        self.pbar.set_show_text(True)
        self.pbar.set_fraction(0.0)
        # self.pbar.set_size_request(-1, 20)
        box2.pack_start(self.pbar, False, False, 0)
        self.win.show_all()
        self.thr = threading.Thread(target=self.read_output, args=[self.pbar])
        self.thr.setDaemon(True)
        self.thr.start()

    def update_progress(self, progress, fraction, text):
        progress.set_fraction(fraction)
        progress.set_text(text)

    def read_output(self, progress):
        fail = False
        update_pkg = False
        option = ''
        packages = ''
        global second
        need_reboot_packages = set(json.loads(open(f'{lib_path}/need_reboot.json').read()))
        upgrade_packages = set(re.split(": | ", " ".join(packages_dictionary['upgrade'])))
        reboot = bool(need_reboot_packages.intersection(upgrade_packages))
        if len(packages_dictionary['upgrade']) == 1 and 'pkg:' in packages_dictionary['upgrade'][0]:
            update_pkg = True
            packages = ' pkg'
            second = True
        else:
            second = False
        if packages_dictionary['system_upgrade'] is True:
            option = 'f'
        howmany = (total_num * 5) + 10
        fraction = 1.0 / howmany
        if backup:
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            txt = _("Cleaning old boot environment")
            GLib.idle_add(self.update_progress, progress, fraction, txt)
            for be in bectl.get_be_list():
                if 'backup' in be and today not in be and 'NR' not in be:
                    bectl.destroy_be(be.split()[0])
            backup_name = datetime.datetime.now().strftime("backup-%Y-%m-%d-%H-%M")
            txt = _("Creating boot environment")
            txt += f" {backup_name}"
            GLib.idle_add(self.update_progress, progress, fraction, txt)
            bectl.create_be(newBeName=backup_name)
            sleep(1)
        txt = _("Fetching package updates")
        new_val = progress.get_fraction() + fraction
        GLib.idle_add(self.update_progress, progress, new_val, txt)
        sleep(1)
        fetch = Popen(
            f'pkg upgrade -Fy{option}{packages}',
            shell=True,
            stdout=PIPE,
            stderr=PIPE,
            close_fds=True,
            universal_newlines=True
        )
        fetch_text = ""
        while True:
            stdout_line = fetch.stdout.readline()
            if fetch.poll() is not None:
                break
            fetch_text += stdout_line
            new_val = progress.get_fraction() + fraction
            GLib.idle_add(self.update_progress, progress, new_val,
                          stdout_line.strip())
        if fetch.returncode != 0:
            stderr_line = fetch.stderr.read()
            fetch_text += stderr_line
            update_fail = open(f'{home}/update.failed', 'w')
            update_fail.writelines(fetch_text)
            update_fail.close()
            fail = True
        else:
            new_val = progress.get_fraction() + fraction
            txt = _("Package updates downloaded")
            GLib.idle_add(self.update_progress, progress, new_val, txt)
            sleep(1)
            new_val = progress.get_fraction() + fraction
            txt = _("Installing package updates")
            GLib.idle_add(self.update_progress, progress, new_val, txt)
            sleep(1)
            while True:
                install = Popen(
                    f'pkg upgrade -y{option}{packages}',
                    shell=True,
                    stdout=PIPE,
                    stderr=PIPE,
                    close_fds=True,
                    universal_newlines=True
                )
                install_text = ""
                while True:
                    stdout_line = install.stdout.readline()
                    if install.poll() is not None:
                        break
                    install_text += stdout_line
                    new_val = progress.get_fraction() + fraction
                    GLib.idle_add(self.update_progress, progress, new_val,
                                  stdout_line.strip())
                if install.returncode == 3:
                    stderr_line = install.stderr.readline()
                    if 'Fail to create temporary file' in stderr_line:
                        raw_line = install_text.splitlines()[-2]
                        failed_package = raw_line.split()[2].replace(':', '')
                        pkg_rquery = run(
                            f'pkg rquery -x "%n" "{failed_package}"',
                            shell=True,
                            stdout=PIPE,
                            stderr=PIPE,
                            universal_newlines=True
                        )
                        package_name = pkg_rquery.stdout.strip()
                        reinstall = Popen(
                            f'pkg delete -y {package_name} ;'
                            f' pkg install -y {package_name}',
                            shell=True,
                            stdout=PIPE,
                            stderr=PIPE,
                            close_fds=True,
                            universal_newlines=True
                        )
                        reinstall_text = ""
                        while True:
                            stdout_line = reinstall.stdout.readline()
                            if reinstall.poll() is not None:
                                break
                            reinstall_text += stdout_line
                            new_val = progress.get_fraction() + fraction
                            GLib.idle_add(self.update_progress, progress,
                                          new_val, stdout_line.strip())
                        if reinstall.returncode != 0:
                            reinstall_text += reinstall.stderr.readline()
                            update_fail = open(f'{home}/update.failed', 'w')
                            update_fail.writelines(reinstall_text)
                            update_fail.close()
                            fail = True
                            break
                        else:
                            new_val = progress.get_fraction() + fraction
                            txt = _("Reinstalling")
                            txt += f" {failed_package} "
                            txt += _("completed")
                            GLib.idle_add(self.update_progress, progress, new_val, txt)
                            sleep(1)
                elif install.returncode != 0:
                    stderr_line = install.stderr.readline()
                    install_text += stderr_line
                    update_fail = open(f'{home}/update.failed', 'w')
                    update_fail.writelines(install_text)
                    update_fail.close()
                    fail = True
                    break
                else:
                    new_val = progress.get_fraction() + fraction
                    txt = _("Software packages upgrade completed")
                    GLib.idle_add(self.update_progress, progress, new_val, txt)
                    sleep(1)
                    break
        GLib.idle_add(self.win.destroy)
        GLib.idle_add(self.stop_tread, fail, update_pkg, reboot)

    def stop_tread(self, fail, update_pkg, reboot):
        global packages_dictionary, stop_icon_refreshing, stop_pkg_refreshing
        global update_started
        self.thr.join()
        if updating():
            unlook_update_station()
        if fail is True:
            update_started = False
            stop_pkg_refreshing = False
            failed_update()
        else:
            if update_pkg is True and check_for_update() is True:
                packages_dictionary = get_pkg_upgrade_data()
                UpdateWindow()
            else:
                update_started = False
                stop_pkg_refreshing = False
                if reboot is True:
                    RestartSystem()
                else:
                    UpdateCompleted()


ftxt = _("""Press "Detail" to get information about the failure.
Get help at https://forums.ghostbsd.org.""")


class failed_update():

    def get_detail(self, widget):
        Popen(f'sudo -u {username} xdg-open {home}/update.failed', shell=True)

    def on_close(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.destroy()

    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_position(Gtk.WindowPosition.CENTER)
        # self.window.set_border_width(8)
        self.window.connect("destroy", self.on_close)
        self.window.set_title(_("Update Failed"))
        self.window.set_default_icon_name('system-software-update')
        vBox = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(vBox)
        vBox.show()
        label = Gtk.Label()
        label.set_markup(ftxt)
        vBox.set_border_width(5)
        vBox.pack_start(label, False, False, 5)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        # hBox.set_border_width(5)
        vBox.pack_start(hBox, False, True, 5)
        hBox.show()
        restart = Gtk.Button(label=_("Detail"))
        restart.connect("clicked", self.get_detail)
        continuebtn = Gtk.Button(label=_("Close"))
        continuebtn.connect("clicked", self.on_close)
        hBox.pack_end(continuebtn, False, False, 5)
        hBox.pack_end(restart, False, False, 5)
        self.window.show_all()


class RestartSystem():

    def on_reboot(self, widget):
        Popen('shutdown -r now', shell=True)
        Gtk.main_quit()

    def on_close(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.destroy()

    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_position(Gtk.WindowPosition.CENTER)
        # self.window.set_border_width(8)
        self.window.connect("destroy", self.on_close)
        self.window.set_title(_("Update Completed"))
        self.window.set_default_icon_name('system-software-update')
        vBox = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(vBox)
        vBox.show()
        rtxt = _("The computer needs to restart to run on the updated software.")
        label = Gtk.Label(label=rtxt)
        vBox.set_border_width(5)
        vBox.pack_start(label, False, False, 5)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        # hBox.set_border_width(5)
        vBox.pack_start(hBox, False, True, 5)
        hBox.show()
        restart = Gtk.Button(label=_("Restart Now"))
        restart.connect("clicked", self.on_reboot)
        continuebtn = Gtk.Button(label=_("Restart Later"))
        continuebtn.connect("clicked", self.on_close)
        hBox.pack_end(restart, False, False, 5)
        hBox.pack_end(continuebtn, False, False, 5)
        self.window.show_all()


class UpdateCompleted():

    def on_close(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.destroy()

    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.connect("destroy", self.on_close)
        self.window.set_title(_("Update Completed"))
        self.window.set_default_icon_name('system-software-update')
        vBox = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(vBox)
        vBox.show()
        rtxt = _("""All software on this system is up to date.""")
        label = Gtk.Label(label=rtxt)
        vBox.set_border_width(5)
        vBox.pack_start(label, False, False, 5)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        # hBox.set_border_width(5)
        vBox.pack_start(hBox, False, True, 5)
        hBox.show()
        close_button = Gtk.Button(label=_("Close"))
        close_button.connect("clicked", self.on_close)
        hBox.pack_end(close_button, False, False, 5)
        self.window.show_all()


class noUpdateAvailable(object):

    def on_close(self, widget):
        Gtk.main_quit()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WindowPosition.CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title(_("No Update Available"))
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(label=_("No update available. This system is up "
                          "to date."))
        box2.pack_start(label, False, False, 0)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        ok_buton = Gtk.Button(label=_("Close"))
        ok_buton.connect("clicked", self.on_close)
        box2.pack_end(ok_buton, False, False, 0)
        window.show_all()


class startCheckUpdate:

    def close_application(self, widget, data):
        if updating():
            unlook_update_station()
        Gtk.main_quit()

    def __init__(self):
        self.win = Gtk.Window()
        self.win.connect("delete-event", self.close_application)
        self.win.set_size_request(500, 75)
        self.win.set_resizable(False)
        self.win.set_title(_("Looking For Updates"))
        self.win.set_border_width(0)
        self.win.set_position(Gtk.WindowPosition.CENTER)
        self.win.set_default_icon_name('system-software-update')
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.win.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        self.pbar = Gtk.ProgressBar()
        self.pbar.set_show_text(True)
        self.pbar.set_fraction(0.0)
        box2.pack_start(self.pbar, False, False, 0)
        self.win.show_all()
        self.thr = threading.Thread(
            target=self.check_for_update,
            args=[self.pbar]
        )
        self.thr.setDaemon(True)
        self.thr.start()

    def update_progress(self, progress, text):
        progress.set_text(text)
        fraction = progress.get_fraction() + 0.2
        progress.set_fraction(fraction)

    def check_for_update(self, progress):
        GLib.idle_add(self.update_progress, progress,
                      _('Checking if the repository is online'))
        sleep(1)
        if network_stat() == 'UP' and repo_online() is True:
            GLib.idle_add(self.update_progress, progress,
                          _('The repository is online'))
            sleep(1)
            if repository_is_syncing() is True:
                GLib.idle_add(self.update_progress, progress,
                              _('The mirror is Syncing'))
                GLib.idle_add(self.stop_tread, mirrorSyncing)
            else:
                if updating():
                    GLib.idle_add(self.update_progress, progress,
                                  _('Updates are already running'))
                    GLib.idle_add(self.stop_tread, update_station_open)
                else:
                    GLib.idle_add(self.update_progress, progress,
                                  'Checking for updates')
                    update_available = check_for_update()
                    if update_available:
                        GLib.idle_add(self.update_progress, progress,
                                      _('Getting the list of packages'))
                        global packages_dictionary
                        packages_dictionary = get_pkg_upgrade_data()
                        look_update_station()
                        GLib.idle_add(self.update_progress, progress,
                                      _('Open the update window'))
                        GLib.idle_add(self.stop_tread, UpdateWindow)
                    elif not update_available and update_available is not None:
                        GLib.idle_add(self.update_progress, progress,
                                      _('No update found'))
                        GLib.idle_add(self.stop_tread, noUpdateAvailable)
                    else:
                        GLib.idle_add(self.stop_tread, somethingIsWrong)
        else:
            GLib.idle_add(self.update_progress, progress,
                          _('The Mirror is unreachable'))
            GLib.idle_add(self.stop_tread, serverUnreachable)

    def stop_tread(self, start_window):
        start_window()
        self.win.hide()
        self.thr.join()


class update_station_open(object):

    def on_close(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.destroy()

    def __init__(self):
        self.window = Gtk.Window()
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.set_border_width(8)
        self.window.connect("destroy", self.on_close)
        self.window.set_title(_("Update Station already started"))
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(label=_("Update Station already open."))
        box2.pack_start(label, False, False, 0)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        ok_buton = Gtk.Button(label=_("Close"))
        ok_buton.connect("clicked", self.on_close)
        box2.pack_end(ok_buton, False, False, 0)
        self.window.show_all()


class mirrorSyncing(object):

    def on_close(self, widget):
        Gtk.main_quit()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WindowPosition.CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title(_("Server Unreachable"))
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(label=_("Packages mirrors are syncing with new "
                          "packages"))
        box2.pack_start(label, False, False, 0)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        ok_buton = Gtk.Button(label=_("Close"))
        ok_buton.connect("clicked", self.on_close)
        box2.pack_end(ok_buton, False, False, 0)
        window.show_all()


class serverUnreachable(object):

    def on_close(self, widget):
        Gtk.main_quit()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WindowPosition.CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title(_("Server Unreachable"))
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(label=_("The server is unreachable. Your internet "
                          "could\nbe down or software package server is down."))
        box2.pack_start(label, False, False, 0)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        ok_buton = Gtk.Button(label=_("Close"))
        ok_buton.connect("clicked", self.on_close)
        box2.pack_end(ok_buton, False, False, 0)
        window.show_all()


class somethingIsWrong(object):

    def on_close(self, widget):
        Gtk.main_quit()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WindowPosition.CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title(_("Something Is Wrong"))
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(homogeneous=False, spacing=10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(label=_(
                          "If you see this message it means that "
                          "something is wrong.\n Please look at pkg upgrade "
                          "output."))
        box2.pack_start(label, False, False, 0)
        box2 = Gtk.HBox(homogeneous=False, spacing=10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        ok_buton = Gtk.Button(label=_("Close"))
        ok_buton.connect("clicked", self.on_close)
        box2.pack_end(ok_buton, False, False, 0)
        window.show_all()


class not_root(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.set_title(_("Software Station"))
        self.connect("delete-event", Gtk.main_quit)
        self.set_size_request(200, 80)
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.add(box1)
        box1.show()
        label = Gtk.Label(label=_('You need to be root'))
        box1.pack_start(label, True, True, 0)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        box1.pack_end(hBox, False, False, 5)
        ok_button = Gtk.Button()
        ok_button.set_label(_("OK"))
        apply_img = Gtk.Image()
        apply_img.set_from_icon_name('gtk-ok', 1)
        ok_button.set_image(apply_img)
        ok_button.connect("clicked", Gtk.main_quit)
        hBox.pack_end(ok_button, False, False, 5)
        self.show_all()


arg = sys.argv
UsageMSG = """
Usage for %s:

Available Commands:

check-now       - Look for update now

""" % arg[0]


global close_session
if os.geteuid() == 0:
    if len(arg) > 2:
        print(UsageMSG)
        sys.exit(0)
    elif len(arg) == 1:
        if socket.gethostname() != 'livecd':
            close_session = False
            TrayIcon().treadingupdate()
            Gtk.main()
        else:
            exit()
    elif len(arg) == 2 and arg[1] == "check-now":
        close_session = True
        startCheckUpdate()
        Gtk.main()
    else:
        print(UsageMSG)
        sys.exit(0)
else:
    not_root()
    Gtk.main()
